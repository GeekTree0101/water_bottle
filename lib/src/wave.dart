import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:path_parsing/path_parsing.dart';

class PathWriter extends PathProxy {
  PathWriter({Path? path}) : this.path = path ?? Path();

  final Path path;

  @override
  void close() {
    path.close();
  }

  @override
  void cubicTo(
      double x1, double y1, double x2, double y2, double x3, double y3) {
    path.cubicTo(x1, y1, x2, y2, x3, y3);
  }

  @override
  void lineTo(double x, double y) {
    path.lineTo(x, y);
  }

  @override
  void moveTo(double x, double y) {
    path.moveTo(x, y);
  }
}

class WaveLayer {
  static const PATHS = [
    // jaggy
    "M0,96L6.2,112C12.3,128,25,160,37,197.3C49.2,235,62,277,74,256C86.2,235,98,149,111,106.7C123.1,64,135,64,148,80C160,96,172,128,185,138.7C196.9,149,209,139,222,133.3C233.8,128,246,128,258,149.3C270.8,171,283,213,295,202.7C307.7,192,320,128,332,117.3C344.6,107,357,149,369,160C381.5,171,394,149,406,149.3C418.5,149,431,171,443,165.3C455.4,160,468,128,480,133.3C492.3,139,505,181,517,213.3C529.2,245,542,267,554,256C566.2,245,578,203,591,197.3C603.1,192,615,224,628,208C640,192,652,128,665,133.3C676.9,139,689,213,702,240C713.8,267,726,245,738,229.3C750.8,213,763,203,775,213.3C787.7,224,800,256,812,229.3C824.6,203,837,117,849,112C861.5,107,874,181,886,208C898.5,235,911,213,923,186.7C935.4,160,948,128,960,117.3C972.3,107,985,117,997,149.3C1009.2,181,1022,235,1034,261.3C1046.2,288,1058,288,1071,261.3C1083.1,235,1095,181,1108,133.3C1120,85,1132,43,1145,53.3C1156.9,64,1169,128,1182,170.7C1193.8,213,1206,235,1218,245.3C1230.8,256,1243,256,1255,229.3C1267.7,203,1280,149,1292,144C1304.6,139,1317,181,1329,197.3C1341.5,213,1354,203,1366,176C1378.5,149,1391,107,1403,90.7C1415.4,75,1428,85,1434,90.7L1440,96L1440,320L1433.8,320C1427.7,320,1415,320,1403,320C1390.8,320,1378,320,1366,320C1353.8,320,1342,320,1329,320C1316.9,320,1305,320,1292,320C1280,320,1268,320,1255,320C1243.1,320,1231,320,1218,320C1206.2,320,1194,320,1182,320C1169.2,320,1157,320,1145,320C1132.3,320,1120,320,1108,320C1095.4,320,1083,320,1071,320C1058.5,320,1046,320,1034,320C1021.5,320,1009,320,997,320C984.6,320,972,320,960,320C947.7,320,935,320,923,320C910.8,320,898,320,886,320C873.8,320,862,320,849,320C836.9,320,825,320,812,320C800,320,788,320,775,320C763.1,320,751,320,738,320C726.2,320,714,320,702,320C689.2,320,677,320,665,320C652.3,320,640,320,628,320C615.4,320,603,320,591,320C578.5,320,566,320,554,320C541.5,320,529,320,517,320C504.6,320,492,320,480,320C467.7,320,455,320,443,320C430.8,320,418,320,406,320C393.8,320,382,320,369,320C356.9,320,345,320,332,320C320,320,308,320,295,320C283.1,320,271,320,258,320C246.2,320,234,320,222,320C209.2,320,197,320,185,320C172.3,320,160,320,148,320C135.4,320,123,320,111,320C98.5,320,86,320,74,320C61.5,320,49,320,37,320C24.6,320,12,320,6,320L0,320Z",
    "M0,64L6.2,90.7C12.3,117,25,171,37,202.7C49.2,235,62,245,74,240C86.2,235,98,213,111,224C123.1,235,135,277,148,282.7C160,288,172,256,185,245.3C196.9,235,209,245,222,245.3C233.8,245,246,235,258,213.3C270.8,192,283,160,295,138.7C307.7,117,320,107,332,101.3C344.6,96,357,96,369,101.3C381.5,107,394,117,406,149.3C418.5,181,431,235,443,256C455.4,277,468,267,480,224C492.3,181,505,107,517,85.3C529.2,64,542,96,554,133.3C566.2,171,578,213,591,240C603.1,267,615,277,628,266.7C640,256,652,224,665,218.7C676.9,213,689,235,702,229.3C713.8,224,726,192,738,181.3C750.8,171,763,181,775,186.7C787.7,192,800,192,812,165.3C824.6,139,837,85,849,85.3C861.5,85,874,139,886,160C898.5,181,911,171,923,181.3C935.4,192,948,224,960,213.3C972.3,203,985,149,997,128C1009.2,107,1022,117,1034,144C1046.2,171,1058,213,1071,197.3C1083.1,181,1095,107,1108,96C1120,85,1132,139,1145,165.3C1156.9,192,1169,192,1182,181.3C1193.8,171,1206,149,1218,144C1230.8,139,1243,149,1255,170.7C1267.7,192,1280,224,1292,250.7C1304.6,277,1317,299,1329,288C1341.5,277,1354,235,1366,192C1378.5,149,1391,107,1403,128C1415.4,149,1428,235,1434,277.3L1440,320L1440,320L1433.8,320C1427.7,320,1415,320,1403,320C1390.8,320,1378,320,1366,320C1353.8,320,1342,320,1329,320C1316.9,320,1305,320,1292,320C1280,320,1268,320,1255,320C1243.1,320,1231,320,1218,320C1206.2,320,1194,320,1182,320C1169.2,320,1157,320,1145,320C1132.3,320,1120,320,1108,320C1095.4,320,1083,320,1071,320C1058.5,320,1046,320,1034,320C1021.5,320,1009,320,997,320C984.6,320,972,320,960,320C947.7,320,935,320,923,320C910.8,320,898,320,886,320C873.8,320,862,320,849,320C836.9,320,825,320,812,320C800,320,788,320,775,320C763.1,320,751,320,738,320C726.2,320,714,320,702,320C689.2,320,677,320,665,320C652.3,320,640,320,628,320C615.4,320,603,320,591,320C578.5,320,566,320,554,320C541.5,320,529,320,517,320C504.6,320,492,320,480,320C467.7,320,455,320,443,320C430.8,320,418,320,406,320C393.8,320,382,320,369,320C356.9,320,345,320,332,320C320,320,308,320,295,320C283.1,320,271,320,258,320C246.2,320,234,320,222,320C209.2,320,197,320,185,320C172.3,320,160,320,148,320C135.4,320,123,320,111,320C98.5,320,86,320,74,320C61.5,320,49,320,37,320C24.6,320,12,320,6,320L0,320Z",
    "M0,64L6.2,74.7C12.3,85,25,107,37,106.7C49.2,107,62,85,74,80C86.2,75,98,85,111,128C123.1,171,135,245,148,256C160,267,172,213,185,176C196.9,139,209,117,222,101.3C233.8,85,246,75,258,106.7C270.8,139,283,213,295,213.3C307.7,213,320,139,332,101.3C344.6,64,357,64,369,85.3C381.5,107,394,149,406,144C418.5,139,431,85,443,85.3C455.4,85,468,139,480,176C492.3,213,505,235,517,224C529.2,213,542,171,554,138.7C566.2,107,578,85,591,74.7C603.1,64,615,64,628,53.3C640,43,652,21,665,37.3C676.9,53,689,107,702,160C713.8,213,726,267,738,245.3C750.8,224,763,128,775,122.7C787.7,117,800,203,812,245.3C824.6,288,837,288,849,261.3C861.5,235,874,181,886,160C898.5,139,911,149,923,138.7C935.4,128,948,96,960,80C972.3,64,985,64,997,101.3C1009.2,139,1022,213,1034,202.7C1046.2,192,1058,96,1071,90.7C1083.1,85,1095,171,1108,176C1120,181,1132,107,1145,80C1156.9,53,1169,75,1182,101.3C1193.8,128,1206,160,1218,165.3C1230.8,171,1243,149,1255,138.7C1267.7,128,1280,128,1292,106.7C1304.6,85,1317,43,1329,64C1341.5,85,1354,171,1366,208C1378.5,245,1391,235,1403,208C1415.4,181,1428,139,1434,117.3L1440,96L1440,320L1433.8,320C1427.7,320,1415,320,1403,320C1390.8,320,1378,320,1366,320C1353.8,320,1342,320,1329,320C1316.9,320,1305,320,1292,320C1280,320,1268,320,1255,320C1243.1,320,1231,320,1218,320C1206.2,320,1194,320,1182,320C1169.2,320,1157,320,1145,320C1132.3,320,1120,320,1108,320C1095.4,320,1083,320,1071,320C1058.5,320,1046,320,1034,320C1021.5,320,1009,320,997,320C984.6,320,972,320,960,320C947.7,320,935,320,923,320C910.8,320,898,320,886,320C873.8,320,862,320,849,320C836.9,320,825,320,812,320C800,320,788,320,775,320C763.1,320,751,320,738,320C726.2,320,714,320,702,320C689.2,320,677,320,665,320C652.3,320,640,320,628,320C615.4,320,603,320,591,320C578.5,320,566,320,554,320C541.5,320,529,320,517,320C504.6,320,492,320,480,320C467.7,320,455,320,443,320C430.8,320,418,320,406,320C393.8,320,382,320,369,320C356.9,320,345,320,332,320C320,320,308,320,295,320C283.1,320,271,320,258,320C246.2,320,234,320,222,320C209.2,320,197,320,185,320C172.3,320,160,320,148,320C135.4,320,123,320,111,320C98.5,320,86,320,74,320C61.5,320,49,320,37,320C24.6,320,12,320,6,320L0,320Z",
    "M0,224L6.2,208C12.3,192,25,160,37,133.3C49.2,107,62,85,74,85.3C86.2,85,98,107,111,133.3C123.1,160,135,192,148,181.3C160,171,172,117,185,96C196.9,75,209,85,222,122.7C233.8,160,246,224,258,250.7C270.8,277,283,267,295,245.3C307.7,224,320,192,332,165.3C344.6,139,357,117,369,112C381.5,107,394,117,406,133.3C418.5,149,431,171,443,170.7C455.4,171,468,149,480,144C492.3,139,505,149,517,144C529.2,139,542,117,554,96C566.2,75,578,53,591,53.3C603.1,53,615,75,628,101.3C640,128,652,160,665,149.3C676.9,139,689,85,702,90.7C713.8,96,726,160,738,181.3C750.8,203,763,181,775,160C787.7,139,800,117,812,90.7C824.6,64,837,32,849,32C861.5,32,874,64,886,90.7C898.5,117,911,139,923,149.3C935.4,160,948,160,960,165.3C972.3,171,985,181,997,202.7C1009.2,224,1022,256,1034,266.7C1046.2,277,1058,267,1071,256C1083.1,245,1095,235,1108,218.7C1120,203,1132,181,1145,154.7C1156.9,128,1169,96,1182,117.3C1193.8,139,1206,213,1218,240C1230.8,267,1243,245,1255,224C1267.7,203,1280,181,1292,149.3C1304.6,117,1317,75,1329,53.3C1341.5,32,1354,32,1366,26.7C1378.5,21,1391,11,1403,26.7C1415.4,43,1428,85,1434,106.7L1440,128L1440,320L1433.8,320C1427.7,320,1415,320,1403,320C1390.8,320,1378,320,1366,320C1353.8,320,1342,320,1329,320C1316.9,320,1305,320,1292,320C1280,320,1268,320,1255,320C1243.1,320,1231,320,1218,320C1206.2,320,1194,320,1182,320C1169.2,320,1157,320,1145,320C1132.3,320,1120,320,1108,320C1095.4,320,1083,320,1071,320C1058.5,320,1046,320,1034,320C1021.5,320,1009,320,997,320C984.6,320,972,320,960,320C947.7,320,935,320,923,320C910.8,320,898,320,886,320C873.8,320,862,320,849,320C836.9,320,825,320,812,320C800,320,788,320,775,320C763.1,320,751,320,738,320C726.2,320,714,320,702,320C689.2,320,677,320,665,320C652.3,320,640,320,628,320C615.4,320,603,320,591,320C578.5,320,566,320,554,320C541.5,320,529,320,517,320C504.6,320,492,320,480,320C467.7,320,455,320,443,320C430.8,320,418,320,406,320C393.8,320,382,320,369,320C356.9,320,345,320,332,320C320,320,308,320,295,320C283.1,320,271,320,258,320C246.2,320,234,320,222,320C209.2,320,197,320,185,320C172.3,320,160,320,148,320C135.4,320,123,320,111,320C98.5,320,86,320,74,320C61.5,320,49,320,37,320C24.6,320,12,320,6,320L0,320Z"
  ];

  /// Animations
  late final Animation<double> animation;

  /// Animation controller
  late final AnimationController controller;

  /// SVG data
  final svgData = Path();

  /// Wave color
  Color color = Colors.blueGrey;

  /// Current offset
  double get offset => animation.value;

  /// Setup animations
  void init(TickerProvider provider, {int frequency = 10}) {
    controller = AnimationController(
      vsync: provider,
      duration: Duration(milliseconds: frequency),
    );
    animation = Tween<double>(begin: 0.0, end: 1.0).animate(
        CurvedAnimation(parent: controller, curve: Curves.easeInOutSine));
    animation.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        controller.repeat(reverse: true);
      } else if (status == AnimationStatus.dismissed) {
        controller.forward();
      }
    });
    controller.value = math.Random().nextDouble();
    controller.forward();
    buildPath();
  }

  /// Clean up
  void dispose() {
    controller.dispose();
  }

  void buildPath() {
    // for beautiful waves, see https://getwaves.io/
    final i = math.Random().nextInt(PATHS.length);
    writeSvgPathDataToPath(PATHS[i], PathWriter(path: svgData));
  }
}
